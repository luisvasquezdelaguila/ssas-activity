import { DatabaseCleaner } from './database-cleaner';
import { BaseSeeder } from './base-seeder';

/**
 * Script simple para limpiar la base de datos
 * Usar este archivo cuando necesites limpiar la DB desde otro script
 */
export class QuickDatabaseCleaner extends BaseSeeder {
  
  // Implementaci√≥n requerida por BaseSeeder
  async run(): Promise<void> {
    await this.cleanAll();
  }

  async clear(): Promise<void> {
    await DatabaseCleaner.cleanDatabase();
  }
  
  /**
   * Limpia toda la base de datos y muestra estad√≠sticas
   */
  async cleanAll(): Promise<void> {
    try {
      console.log('üßπ Iniciando limpieza completa de la base de datos...');
      
      await this.connectDB();
      
      // Mostrar estad√≠sticas antes
      const statsBefore = await DatabaseCleaner.getDatabaseStats();
      console.log('\nüìä Estado ANTES de la limpieza:');
      console.log(`Total de colecciones: ${statsBefore.totalCollections}`);
      
      if (statsBefore.collections.length > 0) {
        statsBefore.collections.forEach(collection => {
          console.log(`  ${collection.name.padEnd(20)} - ${collection.documentCount} documentos`);
        });
      }
      
      // Limpiar
      await DatabaseCleaner.cleanDatabase();
      
      // Mostrar estad√≠sticas despu√©s
      const statsAfter = await DatabaseCleaner.getDatabaseStats();
      console.log('\nüìä Estado DESPU√âS de la limpieza:');
      console.log(`Total de colecciones: ${statsAfter.totalCollections}`);
      
      if (statsAfter.collections.length > 0) {
        statsAfter.collections.forEach(collection => {
          console.log(`  ${collection.name.padEnd(20)} - ${collection.documentCount} documentos`);
        });
      }
      
      await this.disconnectDB();
      console.log('‚ú® Limpieza completada exitosamente');
      
    } catch (error) {
      console.error('‚ùå Error durante la limpieza:', error);
      throw error;
    }
  }

  /**
   * Resetea completamente la base de datos
   */
  async resetAll(): Promise<void> {
    try {
      console.log('üîÑ Iniciando reset completo de la base de datos...');
      
      await this.connectDB();
      await DatabaseCleaner.resetDatabase();
      await this.disconnectDB();
      
      console.log('‚ú® Reset completado exitosamente');
      
    } catch (error) {
      console.error('‚ùå Error durante el reset:', error);
      throw error;
    }
  }

  /**
   * Elimina colecciones espec√≠ficas
   */
  async cleanSpecificCollections(collectionNames: string[]): Promise<void> {
    try {
      console.log(`üßπ Limpiando colecciones espec√≠ficas: ${collectionNames.join(', ')}`);
      
      await this.connectDB();
      await DatabaseCleaner.cleanCollections(collectionNames);
      await this.disconnectDB();
      
      console.log('‚ú® Limpieza espec√≠fica completada exitosamente');
      
    } catch (error) {
      console.error('‚ùå Error durante la limpieza espec√≠fica:', error);
      throw error;
    }
  }

  /**
   * Muestra solo las estad√≠sticas
   */
  async showStats(): Promise<void> {
    try {
      await this.connectDB();
      
      const stats = await DatabaseCleaner.getDatabaseStats();
      console.log('\nüìä Estad√≠sticas de la base de datos:');
      console.log(`Total de colecciones: ${stats.totalCollections}`);
      
      if (stats.collections.length > 0) {
        console.log('\nDetalle por colecci√≥n:');
        stats.collections.forEach(collection => {
          console.log(`  ${collection.name.padEnd(20)} - ${collection.documentCount} documentos`);
        });
      } else {
        console.log('üóÉÔ∏è  No hay colecciones en la base de datos');
      }
      
      await this.disconnectDB();
      
    } catch (error) {
      console.error('‚ùå Error obteniendo estad√≠sticas:', error);
      throw error;
    }
  }
}

// Funci√≥n de utilidad para uso r√°pido
export async function quickCleanDB() {
  const cleaner = new QuickDatabaseCleaner();
  await cleaner.cleanAll();
}

export async function quickStatsDB() {
  const cleaner = new QuickDatabaseCleaner();
  await cleaner.showStats();
}

export async function quickResetDB() {
  const cleaner = new QuickDatabaseCleaner();
  await cleaner.resetAll();
}
