import mongoose from 'mongoose';

// Simple logger usando console
const logger = {
  info: (message: string, ...args: any[]) => console.log(`‚ÑπÔ∏è  ${message}`, ...args),
  error: (message: string, ...args: any[]) => console.error(`‚ùå ${message}`, ...args),
  warn: (message: string, ...args: any[]) => console.warn(`‚ö†Ô∏è  ${message}`, ...args),
  debug: (message: string, ...args: any[]) => console.debug(`üêõ ${message}`, ...args),
};

interface CollectionStats {
  name: string;
  documentCount: number;
}

interface DatabaseStats {
  totalCollections: number;
  collections: CollectionStats[];
}

export class DatabaseCleaner {
  /**
   * Limpia todas las colecciones de la base de datos
   */
  static async cleanDatabase(): Promise<void> {
    try {
      logger.info('üßπ Iniciando limpieza de la base de datos...');

      const db = mongoose.connection.db;
      if (!db) {
        throw new Error('No hay conexi√≥n a la base de datos');
      }

      // Obtener todas las colecciones
      const collections = await db.listCollections().toArray();
      
      if (collections.length === 0) {
        logger.info('üì¶ No hay colecciones para limpiar');
        return;
      }

      logger.info(`üìã Encontradas ${collections.length} colecciones`);

      // Eliminar todas las colecciones
      const deletePromises = collections.map(async (collection) => {
        const collectionName = collection.name;
        try {
          await db.collection(collectionName).deleteMany({});
          logger.info(`‚úÖ Colecci√≥n '${collectionName}' limpiada`);
          return collectionName;
        } catch (error) {
          logger.error(`‚ùå Error limpiando colecci√≥n '${collectionName}':`, error);
          throw error;
        }
      });

      await Promise.all(deletePromises);

      logger.info('üéâ Base de datos limpiada exitosamente');
    } catch (error) {
      logger.error('‚ùå Error limpiando la base de datos:', error);
      throw error;
    }
  }

  /**
   * Limpia colecciones espec√≠ficas
   */
  static async cleanCollections(collectionNames: string[]): Promise<void> {
    try {
      logger.info(`üßπ Limpiando colecciones espec√≠ficas: ${collectionNames.join(', ')}`);

      const db = mongoose.connection.db;
      if (!db) {
        throw new Error('No hay conexi√≥n a la base de datos');
      }

      const deletePromises = collectionNames.map(async (collectionName) => {
        try {
          const result = await db.collection(collectionName).deleteMany({});
          logger.info(`‚úÖ Colecci√≥n '${collectionName}' limpiada - ${result.deletedCount} documentos eliminados`);
          return { collection: collectionName, deletedCount: result.deletedCount };
        } catch (error) {
          logger.error(`‚ùå Error limpiando colecci√≥n '${collectionName}':`, error);
          throw error;
        }
      });

      const results = await Promise.all(deletePromises);
      const totalDeleted = results.reduce((sum, result) => sum + result.deletedCount, 0);

      logger.info(`üéâ Limpieza completada - ${totalDeleted} documentos eliminados en total`);
    } catch (error) {
      logger.error('‚ùå Error limpiando colecciones espec√≠ficas:', error);
      throw error;
    }
  }

  /**
   * Elimina completamente las colecciones (drop)
   */
  static async dropAllCollections(): Promise<void> {
    try {
      logger.info('üóëÔ∏è Eliminando todas las colecciones...');

      const db = mongoose.connection.db;
      if (!db) {
        throw new Error('No hay conexi√≥n a la base de datos');
      }

      // Obtener todas las colecciones
      const collections = await db.listCollections().toArray();
      
      if (collections.length === 0) {
        logger.info('üì¶ No hay colecciones para eliminar');
        return;
      }

      logger.info(`üìã Encontradas ${collections.length} colecciones para eliminar`);

      // Eliminar (drop) todas las colecciones
      const dropPromises = collections.map(async (collection) => {
        const collectionName = collection.name;
        try {
          await db.collection(collectionName).drop();
          logger.info(`‚úÖ Colecci√≥n '${collectionName}' eliminada completamente`);
          return collectionName;
        } catch (error) {
          logger.error(`‚ùå Error eliminando colecci√≥n '${collectionName}':`, error);
          throw error;
        }
      });

      await Promise.all(dropPromises);

      logger.info('üéâ Todas las colecciones eliminadas exitosamente');
    } catch (error) {
      logger.error('‚ùå Error eliminando colecciones:', error);
      throw error;
    }
  }

  /**
   * Resetea la base de datos (limpia y recrea √≠ndices)
   */
  static async resetDatabase(): Promise<void> {
    try {
      logger.info('üîÑ Reseteando base de datos...');

      // Limpiar todas las colecciones
      await this.cleanDatabase();

      // Recrear √≠ndices si es necesario
      logger.info('üîß Recreando √≠ndices...');
      
      // Aqu√≠ puedes agregar l√≥gica para recrear √≠ndices espec√≠ficos si es necesario
      // Ejemplo:
      // await mongoose.model('User').createIndexes();
      // await mongoose.model('Company').createIndexes();

      logger.info('üéâ Base de datos reseteada exitosamente');
    } catch (error) {
      logger.error('‚ùå Error reseteando la base de datos:', error);
      throw error;
    }
  }

  /**
   * Verifica el estado de la base de datos
   */
  static async getDatabaseStats(): Promise<DatabaseStats> {
    try {
      const db = mongoose.connection.db;
      if (!db) {
        throw new Error('No hay conexi√≥n a la base de datos');
      }

      const collections = await db.listCollections().toArray();
      const stats: DatabaseStats = {
        totalCollections: collections.length,
        collections: []
      };

      for (const collection of collections) {
        const collectionName = collection.name;
        const count = await db.collection(collectionName).countDocuments();
        stats.collections.push({
          name: collectionName,
          documentCount: count
        });
      }

      return stats;
    } catch (error) {
      logger.error('‚ùå Error obteniendo estad√≠sticas de la base de datos:', error);
      throw error;
    }
  }
}
